// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ModelingEvolution.AutoUpdater.Tests.FeatureTests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AutoUpdaterUpdateProcessFeature : object, Xunit.IClassFixture<AutoUpdaterUpdateProcessFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FeatureTests", "AutoUpdater Update Process", "    As a DevOps engineer\r\n    I want to update applications using Docker Compose\r" +
                "\n    So that I can deploy new versions safely with proper rollback capabilities", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UpdateHost.feature"
#line hidden
        
        public AutoUpdaterUpdateProcessFeature(AutoUpdaterUpdateProcessFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I have an UpdateHost configured", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.AndAsync("the system has SSH connectivity", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
    await testRunner.AndAsync("I have a valid Docker Compose configuration", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successful update with migration scripts")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Successful update with migration scripts")]
        public async System.Threading.Tasks.Task SuccessfulUpdateWithMigrationScripts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successful update with migration scripts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 12
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.AndAsync("no backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("all services will be healthy after deployment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
    await testRunner.ThenAsync("the update should succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
    await testRunner.AndAsync("the version should be updated to \"1.1.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("migration scripts should be executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("all services should be healthy", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No update needed when already at latest version")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "No update needed when already at latest version")]
        public async System.Threading.Tasks.Task NoUpdateNeededWhenAlreadyAtLatestVersion()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No update needed when already at latest version", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 24
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.AndAsync("the latest available version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
    await testRunner.ThenAsync("the update should succeed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
    await testRunner.AndAsync("no migration scripts should be executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync("no Docker services should be restarted", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update fails when backup creation fails")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Update fails when backup creation fails")]
        public async System.Threading.Tasks.Task UpdateFailsWhenBackupCreationFails()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update fails when backup creation fails", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
    await testRunner.AndAsync("a backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
    await testRunner.ButAsync("backup creation fails with \"Insufficient disk space\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 36
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("the update should fail immediately", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
    await testRunner.AndAsync("the error should mention \"Backup creation failed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("no migration scripts should be executed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update fails during migration but recovers with backup")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Update fails during migration but recovers with backup")]
        public async System.Threading.Tasks.Task UpdateFailsDuringMigrationButRecoversWithBackup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update fails during migration but recovers with backup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 42
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 43
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.AndAsync("a backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
    await testRunner.AndAsync("backup creation succeeds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
    await testRunner.ButAsync("migration script execution fails", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 48
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
    await testRunner.ThenAsync("the update should fail with recovery", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 50
    await testRunner.AndAsync("a rollback should be performed using the backup", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
    await testRunner.AndAsync("the error should mention \"Migration failed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update fails during Docker startup but recovers with backup")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Update fails during Docker startup but recovers with backup")]
        public async System.Threading.Tasks.Task UpdateFailsDuringDockerStartupButRecoversWithBackup()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update fails during Docker startup but recovers with backup", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 54
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 55
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.AndAsync("a backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
    await testRunner.AndAsync("backup creation succeeds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
    await testRunner.AndAsync("migration scripts execute successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
    await testRunner.ButAsync("Docker Compose startup fails", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 61
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
    await testRunner.ThenAsync("the update should fail with recovery", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
    await testRunner.AndAsync("a rollback should be performed using the backup", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
    await testRunner.AndAsync("the error should mention \"Docker startup failed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update succeeds partially when non-critical services fail health check")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Update succeeds partially when non-critical services fail health check")]
        public async System.Threading.Tasks.Task UpdateSucceedsPartiallyWhenNon_CriticalServicesFailHealthCheck()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update succeeds partially when non-critical services fail health check", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 67
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
    await testRunner.AndAsync("no backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.AndAsync("migration scripts execute successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
    await testRunner.AndAsync("Docker Compose starts successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
    await testRunner.ButAsync("some non-critical services fail health checks", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 74
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
    await testRunner.ThenAsync("the update should result in partial success", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
    await testRunner.AndAsync("the version should be updated to \"1.1.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
    await testRunner.AndAsync("healthy services should remain running", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update fails when critical services fail health check with backup recovery")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Update fails when critical services fail health check with backup recovery")]
        public async System.Threading.Tasks.Task UpdateFailsWhenCriticalServicesFailHealthCheckWithBackupRecovery()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update fails when critical services fail health check with backup recovery", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 80
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 81
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
    await testRunner.AndAsync("a backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
    await testRunner.AndAsync("backup creation succeeds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
    await testRunner.AndAsync("migration scripts execute successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
    await testRunner.AndAsync("Docker Compose starts successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
    await testRunner.ButAsync("critical services fail health checks", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 88
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 89
    await testRunner.ThenAsync("the update should fail with recovery", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 90
    await testRunner.AndAsync("a rollback should be performed using the backup", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
    await testRunner.AndAsync("the error should mention \"Critical services unhealthy\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update fails with emergency rollback on unexpected error")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Update fails with emergency rollback on unexpected error")]
        public async System.Threading.Tasks.Task UpdateFailsWithEmergencyRollbackOnUnexpectedError()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update fails with emergency rollback on unexpected error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 94
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 95
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
    await testRunner.AndAsync("a backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 98
    await testRunner.AndAsync("backup creation succeeds", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
    await testRunner.ButAsync("an unexpected error occurs during health check", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 100
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 101
    await testRunner.ThenAsync("the update should fail with recovery", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 102
    await testRunner.AndAsync("an emergency rollback should be performed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 103
    await testRunner.AndAsync("the error should mention \"Unexpected error\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Migration failure without backup has no recovery options")]
        [Xunit.TraitAttribute("FeatureTitle", "AutoUpdater Update Process")]
        [Xunit.TraitAttribute("Description", "Migration failure without backup has no recovery options")]
        public async System.Threading.Tasks.Task MigrationFailureWithoutBackupHasNoRecoveryOptions()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Migration failure without backup has no recovery options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 106
    await testRunner.GivenAsync("the current deployment version is \"1.0.0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 107
    await testRunner.AndAsync("a new version \"1.1.0\" is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
    await testRunner.AndAsync("migration scripts exist for the update", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
    await testRunner.AndAsync("no backup script is present", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
    await testRunner.ButAsync("migration script execution fails", ((string)(null)), ((global::Reqnroll.Table)(null)), "But ");
#line hidden
#line 111
    await testRunner.WhenAsync("I perform an update", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
    await testRunner.ThenAsync("the update should fail without recovery", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 113
    await testRunner.AndAsync("the error should mention \"No recovery possible without backup\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AutoUpdaterUpdateProcessFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AutoUpdaterUpdateProcessFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
