name: Promote Docker Images to Production

on:
  push:
    tags: [ 'v*' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: modelingevolution/autoupdater

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract version metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
    
    - name: Promote commit image to production tags
      run: |
        set -e
        
        echo "üîÑ Promoting commit image to production tags..."
        
        # Extract version from tag (remove 'v' prefix)
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"
        
        # Extract short SHA from the tag commit and create master-{short_sha} format
        SHORT_SHA="${{ github.sha }}"
        SHORT_SHA="${SHORT_SHA:0:7}"
        SOURCE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${SHORT_SHA}"
        
        echo "Source image: $SOURCE_TAG"
        echo "GitHub SHA: ${{ github.sha }}"
        echo "Short SHA: $SHORT_SHA"
        
        # Verify source image exists
        if ! docker buildx imagetools inspect "$SOURCE_TAG" > /dev/null 2>&1; then
          echo "‚ùå Source image not found: $SOURCE_TAG"
          echo "Available images:"
          docker buildx imagetools ls "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" || echo "No images found"
          exit 1
        fi
        
        # Create manifest list for each production tag using the master-{short_sha} reference
        echo "Creating production tags..."
        TAGS_JSON='${{ steps.meta.outputs.json }}'
        echo "$TAGS_JSON" | jq -r '.tags[]' | while read tag; do
          if [[ -n "$tag" && "$tag" != *":-"* ]]; then
            echo "Creating tag: $tag"
            docker buildx imagetools create \
              --tag "$tag" \
              "$SOURCE_TAG"
          fi
        done
        
        echo "‚úÖ Promotion completed successfully"
        echo "Production tags created:"
        echo "$TAGS_JSON" | jq -r '.tags[]'