name: Promote Docker Images to Production

on:
  push:
    tags: [ 'v*' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: modelingevolution/autoupdater

jobs:
  promote:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract version metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest
    
    - name: Promote commit image to production tags
      run: |
        set -e
        
        echo "🔄 Promoting commit image to production tags..."
        
        # Extract version from tag (remove 'v' prefix)
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"
        
        # Extract short SHA from the tag commit and create master-{short_sha} format
        SHORT_SHA="${{ github.sha }}"
        SHORT_SHA="${SHORT_SHA:0:7}"
        SOURCE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${SHORT_SHA}"
        
        echo "Source image: $SOURCE_TAG"
        echo "GitHub SHA: ${{ github.sha }}"
        echo "Short SHA: $SHORT_SHA"
        echo "Version: $VERSION"
        
        # Verify source image exists
        if ! docker buildx imagetools inspect "$SOURCE_TAG" > /dev/null 2>&1; then
          echo "❌ Source image not found: $SOURCE_TAG"
          echo "Available images:"
          docker buildx imagetools ls "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" || echo "No images found"
          exit 1
        fi
        
        # Create temporary directory for build context
        mkdir -p /tmp/promote-context
        
        # Create app.version file with semantic version
        echo "$VERSION" > /tmp/promote-context/app.version
        
        # Create simple Dockerfile to add app.version file
        cat > /tmp/promote-context/Dockerfile << 'EOF'
        FROM __SOURCE_IMAGE__
        COPY app.version /app/app.version
        EOF
        
        # Replace placeholder with actual source image
        sed -i "s|__SOURCE_IMAGE__|$SOURCE_TAG|g" /tmp/promote-context/Dockerfile
        
        # Create production tags by building new image with app.version
        echo "Creating production tags..."
        TAGS_JSON='${{ steps.meta.outputs.json }}'
        
        # Build new image with app.version and tag it with all production tags
        TAGS_ARGS=""
        while read tag; do
          if [[ -n "$tag" && "$tag" != *":-"* ]]; then
            TAGS_ARGS="$TAGS_ARGS --tag $tag"
          fi
        done < <(echo "$TAGS_JSON" | jq -r '.tags[]')
        
        # Build and push the final image with all tags
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --push \
          $TAGS_ARGS \
          /tmp/promote-context
        
        # Cleanup
        rm -rf /tmp/promote-context
        
        echo "✅ Promotion completed successfully"
        echo "Production tags created:"
        echo "$TAGS_JSON" | jq -r '.tags[]'