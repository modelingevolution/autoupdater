@using ModelingEvolution.AutoUpdater.Host.Services.VPN
@using ModelingEvolution.NetworkManager
@inject IConfiguration Configuration
@inject ISshVpnService SshVpnService
@inject ILogger<VpnControl> Logger

<MudStack Spacing="3">
    @if (_vpnProviderAccess == VpnProviderAccess.Ssh)
    {
        <!-- SSH VPN Switch -->
        <MudText Typo="Typo.h5">Support Vpn Connection</MudText>
        <MudText Typo="Typo.body1">Vpn is used to support AI & Video Processing remotely by RocketWelder.</MudText>
        <SshVpnSwitch />
        
        <!-- SSH VPN Status Display -->
        @* <VpnStatusDisplay /> *@
    }
    else if (_vpnProviderAccess == VpnProviderAccess.NetworkManager)
    {
        <!-- NetworkManager VPN Switch -->
        <VpnSwitch />
    }
    else if (_vpnProviderAccess == VpnProviderAccess.None)
    {
        <MudAlert Severity="Severity.Info" Class="ma-2">
            <strong>VPN support Disabled:</strong> No VPN access method configured (VpnProviderAccess: None)
        </MudAlert>
    }
</MudStack>

@code {
    private VpnProviderAccess _vpnProviderAccess = VpnProviderAccess.None;

    protected override void OnInitialized()
    {
        // Parse configuration values
        var vpnProviderAccessStr = Configuration.GetValue<string>("VpnProviderAccess", "None");
        
        if (Enum.TryParse<VpnProviderAccess>(vpnProviderAccessStr, true, out var providerAccess))
        {
            _vpnProviderAccess = providerAccess;
        }
        else
        {
            Logger.LogWarning("Invalid VpnProviderAccess configuration: {Value}. Using None.", vpnProviderAccessStr);
        }
        
        Logger.LogInformation("VPN Configuration: Access={Access}", _vpnProviderAccess);
    }
}