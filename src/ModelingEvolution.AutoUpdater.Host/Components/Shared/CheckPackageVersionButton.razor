@using ModelingEvolution.AutoUpdater
@using ModelingEvolution.AutoUpdater.Common
@using ModelingEvolution.AutoUpdater.Common.Events
@using ModelingEvolution.AutoUpdater.Services

@inject DockerComposeConfigurationModel ConfigurationModel
@inject UpdateHost _updateHost
@inject ILogger<CheckPackageVersionButton> Logger
@inject IInMemoryLoggerSink LoggerSink

<MudTooltip Text="Check Package Version">
    <MudIconButton Icon="@(_isChecking ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Refresh)" 
                   Color="Color.Default" 
                   Size="Size.Small"
                   OnClick="CheckVersionAsync"
                   Disabled="@_isChecking" />
</MudTooltip>

@code {
    [Parameter] public PackageName PackageName { get; set; }
    
    private bool _isChecking = false;

    private async Task CheckVersionAsync()
    {
        if (_isChecking) return;
        
        // Clear logs and enable logging
        LoggerSink.Clear();
        LoggerSink.Enabled = true;
        
        _isChecking = true;
        
        try
        {
            Logger.LogInformation("Starting version check for package: {PackageName}", PackageName);
            
            // Run in background thread to avoid blocking UI
            _= Task.Run(async () =>
            {
                try
                {
                    // Get the package configuration
                    var dockerComposeConfiguration = ConfigurationModel?.GetPackage(PackageName);
                    if(dockerComposeConfiguration == null)
                    {
                        Logger.LogWarning("No configuration found for package: {PackageName}", PackageName);
                        return;
                    }
                    await _updateHost.CheckIsUpdateAvailable(dockerComposeConfiguration);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error during version check for package: {PackageName}", PackageName);
                }
            });
        }
        finally
        {
            _isChecking = false;
            
            // Ensure UI update happens on UI thread
            await InvokeAsync(StateHasChanged);
        }
    }
}