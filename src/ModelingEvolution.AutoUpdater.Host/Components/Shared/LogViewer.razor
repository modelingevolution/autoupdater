@using ModelingEvolution.AutoUpdater.Services
@using Microsoft.Extensions.Logging
@inject IInMemoryLoggerSink LoggerSink
@inject IProgressService ProgressService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="logger-viewer">
    @if (ProgressService.IsRunning)
    {
        <MudCard Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <div style="display: flex; align-items: center;">
                        <MudIcon Icon="Icons.Material.Filled.Build" class="mr-3" />
                        <MudText Typo="Typo.h6">Update Progress</MudText>
                    </div>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="mb-2">@ProgressService.CurrentOperation</MudText>
                <MudProgressLinear Value="@ProgressService.ProgressPercentage" Class="mb-2" />
                <MudText Typo="Typo.caption">@ProgressService.ProgressPercentage%</MudText>
            </MudCardContent>
        </MudCard>
    }

    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <div style="display: flex; align-items: center;">
                        <MudIcon Icon="Icons.Material.Filled.Terminal" class="mr-3" />
                        <MudText Typo="Typo.h6">Update Logs</MudText>
                        <MudChip T="string" Text="@(_logEntries.Count.ToString())" Size="Size.Small" Class="ml-2" />
                    </div>
                    <div>
                        <MudTooltip Text="@(_autoScroll ? "Disable auto-scroll" : "Enable auto-scroll")">
                            <MudIconButton Icon="@(_autoScroll ? Icons.Material.Filled.PauseCircleFilled : Icons.Material.Filled.PlayCircleFilled)" 
                                           OnClick="ToggleAutoScroll" 
                                           Size="Size.Small" />
                        </MudTooltip>
                    </div>
                </div>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="padding: 0;">
            <div class="log-container" style="height: 400px; overflow-y: auto; background-color: #1e1e1e; font-family: 'Courier New', monospace; font-size: 12px;" @ref="logContainer">
                @if (_logEntries.Count > 0)
                {
                    <ObservableForEach Context="log" IsNotifyPropertyChangedEnabled="false" ItemSource="_logEntries">
                    
                        <div class="log-entry" style="padding: 4px 12px; border-bottom: 1px solid #333; color: @GetLogColor(log.Level);">
                            <span style="color: #888; margin-right: 8px;">@log.Timestamp.ToString("HH:mm:ss.fff")</span>
                            <span style="color: @GetLevelColor(log.Level); margin-right: 8px; font-weight: bold;">[@log.Level.ToString().ToUpper()]</span>
                            @* <span style="color: #6a9bd1; margin-right: 8px;">@log.Category</span> *@
                            <span>@log.Message</span>
                            @if (log.Exception != null)
                            {
                                <div style="color: #ff6b6b; margin-top: 4px; padding-left: 16px; font-size: 11px;">
                                    @log.Exception.Message
                                </div>
                            }
                        </div>
                    
                    </ObservableForEach>
                }
                else
                {
                    <div style="padding: 20px; text-align: center; color: #888;">
                        No logs available
                    </div>
                }
            </div>
        </MudCardContent>
    </MudCard>
</div>

@code {
    private IReadOnlyList<LogEntry> _logEntries;
    private ElementReference logContainer;
    private bool _autoScroll = true;

    protected override void OnInitialized()
    {
        // Load existing logs
        _logEntries = LoggerSink.LogEntries;
        
        ProgressService.Changed += OnProgressChanged;
    }


    private async void OnProgressChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

   

    
    private void ToggleAutoScroll()
    {
        _autoScroll = !_autoScroll;
        StateHasChanged();
    }

    private string GetLogColor(LogLevel level) => level switch
    {
        LogLevel.Trace => "#888",
        LogLevel.Debug => "#888",
        LogLevel.Information => "#fff",
        LogLevel.Warning => "#ffa726",
        LogLevel.Error => "#f44336",
        LogLevel.Critical => "#d32f2f",
        _ => "#fff"
    };

    private string GetLevelColor(LogLevel level) => level switch
    {
        LogLevel.Trace => "#9e9e9e",
        LogLevel.Debug => "#607d8b", 
        LogLevel.Information => "#4caf50",
        LogLevel.Warning => "#ff9800",
        LogLevel.Error => "#f44336",
        LogLevel.Critical => "#d32f2f",
        _ => "#fff"
    };

    public void Dispose()
    {
        ProgressService.Changed -= OnProgressChanged;
    }
}

<style>
    .logger-viewer .log-container {
        scrollbar-width: thin;
        scrollbar-color: #666 #333;
    }

    .logger-viewer .log-container::-webkit-scrollbar {
        width: 8px;
    }

    .logger-viewer .log-container::-webkit-scrollbar-track {
        background: #333;
    }

    .logger-viewer .log-container::-webkit-scrollbar-thumb {
        background: #666;
        border-radius: 4px;
    }

    .logger-viewer .log-container::-webkit-scrollbar-thumb:hover {
        background: #888;
    }

    .logger-viewer .log-entry:hover {
        background-color: #2a2a2a;
    }
</style>